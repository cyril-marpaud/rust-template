{
  description = "{{description}}";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs";

    flake-parts = {
      url = "github:hercules-ci/flake-parts";
      inputs.nixpkgs-lib.follows = "nixpkgs";
    };

    devshell = {
      url = "github:numtide/devshell";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    rust-overlay = {
      url = "github:oxalica/rust-overlay";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    git-z = {
      url = "github:ejpcmac/git-z";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = { flake-parts, ... }@inputs:
    flake-parts.lib.mkFlake { inherit inputs; } {
      imports = [ inputs.devshell.flakeModule ];
      systems = [ "x86_64-linux" ];

      perSystem = { inputs', system, ... }:
        let
          overlays = [ (import inputs.rust-overlay) ];
          pkgs = import inputs.nixpkgs { inherit system overlays; };
          rust-toolchain = pkgs.rust-bin.fromRustupToolchainFile ./rust-toolchain.toml;
          git-z = inputs'.git-z.packages.git-z;
        in
        {
          devshells.default = {
            name = "{{project-name}}";

            motd = ''

              {202}ðŸ”¨ Welcome to the {{project-name}} devshell!{reset}
            '';

            packages = with pkgs; [
              # Build toolchain
              rust-toolchain
              clang{% if project-kind == "embedded" %}
              flip-link{% endif %}

              # IDE toolchain
              nil
              nixpkgs-fmt
              rust-analyzer

              # Tools
              cargo-bloat
              cargo-outdated
              cargo-watch
              git
              git-z
              gitAndTools.gitflow{% if project-kind == "embedded" %}
              cargo-binutils
              gcc-arm-embedded
              openocd
              probe-rs
              probe-run{% endif %}
            ];
          };
        };
    };
}
