{
  description = "{{description}}";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs";

    flake-parts = {
      url = "github:hercules-ci/flake-parts";
      inputs.nixpkgs-lib.follows = "nixpkgs";
    };

    devshell = {
      url = "github:numtide/devshell";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    rust-overlay = {
      url = "github:oxalica/rust-overlay";
      inputs.nixpkgs.follows = "nixpkgs";
    };{% if project-type == "CLI" %}

    naersk = {
      url = "github:nix-community/naersk";
      inputs.nixpkgs.follows = "nixpkgs";
    };{% endif %}

    git-z = {
      url = "github:ejpcmac/git-z";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = { flake-parts, ... }@inputs:
    flake-parts.lib.mkFlake { inherit inputs; } {
      imports = [ inputs.devshell.flakeModule ];
      systems = [ "x86_64-linux" ];

      perSystem = { {% if project-type == "CLI" %}self', {% endif %}inputs', system, ... }:
        let
          overlays = [ (import inputs.rust-overlay) ];
          pkgs = import inputs.nixpkgs { inherit system overlays; };
          rust-toolchain =
            pkgs.rust-bin.fromRustupToolchainFile ./rust-toolchain.toml;
        in
        {{"{"}}{% if project-type == "CLI" %}
          ######################################################################
          ##                             Packages                             ##
          ######################################################################

          packages =
            let
              packageName = "{{project-name}}";

              naersk = pkgs.callPackage inputs.naersk {
                cargo = rust-toolchain;
                rustc = rust-toolchain;
              };
            in
            {
              default = self'.packages.${packageName};

              ${packageName} = naersk.buildPackage {
                src = ./.;
                RUSTFLAGS = "-A missing_docs";
              };
            };
{% endif %}
          ######################################################################
          ##                            Devshells                             ##
          ######################################################################

          devshells =
            let
              git-z = inputs'.git-z.packages.git-z;

              buildToolchain = with pkgs; [
                rust-toolchain
                clang{% if project-kind == "embedded" %}
                flip-link{% endif %}
              ];

              checkToolchain = with pkgs; [
                nixpkgs-fmt
              ];

              ideToolchain = with pkgs; [
                nil
                rust-analyzer
              ];

              developmentTools = with pkgs; [
                cargo-bloat
                cargo-outdated
                cargo-watch
                git
                git-z
                gitAndTools.gitflow{% if project-kind == "embedded" %}
                cargo-binutils
                gcc-arm-embedded
                openocd
                probe-rs
                probe-run{% endif %}
              ];
            in
            {
              default = {
                name = "{{project-name}}";

                motd = ''

                {202}ðŸ”¨ Welcome to the {{project-name}} devshell!{reset}
              '';

                packages =
                  buildToolchain
                  ++ checkToolchain
                  ++ ideToolchain
                  ++ developmentTools;
              };
            };
        };
    };
}
