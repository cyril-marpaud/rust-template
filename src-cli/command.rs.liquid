{{license-header}}
mod hello;
mod helpers;

use clap::Parser;
use eyre::Result;

use self::hello::Hello;

/// {{description}}
#[derive(Debug, Parser)]
#[command(author, version = env!("VERSION_WITH_GIT"))]
pub enum {{crate_name|upper_camel_case}} {
    /// Say hello.
    Hello(Hello),
}

trait Command {
    /// Runs the command.
    fn run(&self) -> Result<()>;
}

impl {{crate_name|upper_camel_case}} {
    /// Runs {{project-name}}.
    pub fn run() -> Result<()> {
        let result = match Self::parse() {
            Self::Hello(hello) => hello.run(),
        };

        match result {
            Err(error) => handle_errors(error),
            Ok(()) => Ok(()),
        }
    }
}

// /// How to handle the error.
// enum ErrorHandling {
//     /// Return the report.
//     Return(Report),
//     /// Exit the program with the given status code.
//     Exit(i32),
// }

fn handle_errors(error: color_eyre::Report) -> Result<()> {
    // let handling = if let Some(error) = error.downcast_ref::<ErrorType>() {
    //     handle_error_type(error)
    // } else {
    //     ErrorHandling::Return(error)
    // };

    // match handling {
    //     ErrorHandling::Return(error) => Err(error),
    //     ErrorHandling::Exit(code) => {
    //         #[allow(clippy::exit)]
    //         std::process::exit(code);
    //     }
    // }
    Err(error)
}

// fn handle_error_type(error: &ErrorType) -> ErrorHandling {
//     match error {
//         ErrorType::ErrorKind => {
//             error!("{error}");
//             hint!("Some help message.");
//         }
//     }

//     ErrorHandling::Exit(1)
// }
