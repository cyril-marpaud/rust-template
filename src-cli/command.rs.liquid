{{license-header}}
mod hello;
mod helpers;

use clap::Parser;
use eyre::Result;

use self::hello::Hello;

/// {{description}}
#[derive(Debug, Parser)]
#[command(author, version)]
pub enum {{crate_name|upper_camel_case}} {
    /// Say hello.
    Hello(Hello),
}

trait Command {
    /// Runs the command.
    fn run(&self) -> Result<()>;
}

impl {{crate_name|upper_camel_case}} {
    /// Runs {{project-name}}.
    pub fn run() -> Result<()> {
        let result = match Self::parse() {
            Self::Hello(hello) => hello.run(),
        };

        match result {
            Err(e) => handle_errors(e),
            Ok(()) => Ok(()),
        }
    }
}

fn handle_errors(e: color_eyre::Report) -> Result<()> {
    // if let Some(e) = e.downcast_ref::<ErrorType>() {
    //     match e {
    //         ErrorType::ErrorKind => {
    //             error!("{e}");
    //             hint!("Some help message.");
    //         }
    //     }
    //     std::process::exit(1);
    // } else {
    Err(e)
    // }
}
